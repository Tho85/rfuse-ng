diff -c rfuse-ng/ext/helper.c rfuse-ng-1.9/ext/helper.c
*** rfuse-ng/ext/helper.c	2010-06-20 18:11:03.000000000 +0300
--- rfuse-ng-1.9/ext/helper.c	2010-11-05 00:56:53.568705000 +0200
***************
*** 47,56 ****
  struct fuse_args * rarray2fuseargs(VALUE rarray){
  
    Check_Type(rarray, T_ARRAY);
- 
    struct fuse_args *args = malloc(sizeof(struct fuse_args));
! 
!   args->argc      = RARRAY(rarray)->len;
    args->argv      = malloc(args->argc * sizeof(char *) + 1);
    /* Nope, this isn't really 'allocated'. The elements
     * of this array shouldn't be freed */
--- 47,54 ----
  struct fuse_args * rarray2fuseargs(VALUE rarray){
  
    Check_Type(rarray, T_ARRAY);
    struct fuse_args *args = malloc(sizeof(struct fuse_args));
!   args->argc      = RARRAY_LEN(rarray);
    args->argv      = malloc(args->argc * sizeof(char *) + 1);
    /* Nope, this isn't really 'allocated'. The elements
     * of this array shouldn't be freed */
***************
*** 58,67 ****
  
    int i;
    VALUE v;
    for(i = 0; i < args->argc; i++) {
!     v = RARRAY(rarray)->ptr[i];
      Check_Type(v, T_STRING);
!     args->argv[i] = STR2CSTR(RSTRING(v));
    }
    args->argv[args->argc] = NULL;
    
--- 56,66 ----
  
    int i;
    VALUE v;
+ 
    for(i = 0; i < args->argc; i++) {
!     v = RARRAY_PTR(rarray)[i];
      Check_Type(v, T_STRING);
!     args->argv[i] = rb_string_value_ptr(&v); //STR2CSTR(RSTRING(v));
    }
    args->argv[args->argc] = NULL;
    
diff -c rfuse-ng/ext/helper.h rfuse-ng-1.9/ext/helper.h
*** rfuse-ng/ext/helper.h	2010-06-20 18:11:03.000000000 +0300
--- rfuse-ng-1.9/ext/helper.h	2010-11-05 00:57:04.152705000 +0200
***************
*** 11,14 ****
--- 11,17 ----
  void rfuseconninfo2fuseconninfo(VALUE rfuseconninfo,struct fuse_conn_info *fuseconninfo);
  struct fuse_args * rarray2fuseargs(VALUE rarray);
  
+ #define STR2CSTR(X) StringValuePtr(X) 
+ 
+ 
  #endif
diff -c rfuse-ng/ext/rfuse.c rfuse-ng-1.9/ext/rfuse.c
*** rfuse-ng/ext/rfuse.c	2010-11-05 00:46:36.868705000 +0200
--- rfuse-ng-1.9/ext/rfuse.c	2010-11-05 00:53:11.452705000 +0200
***************
*** 22,27 ****
--- 22,31 ----
  //this is a global variable where we store the fuse object
  static VALUE fuse_object;
  
+ #define ruby_errinfo rb_errinfo()
+ #define STR2CSTR(X) StringValuePtr(X) 
+ 
+ 
  static int unsafe_return_error(VALUE *args)
  {
    VALUE info;
***************
*** 701,706 ****
--- 705,726 ----
          wrap_context(ctx),path,size,offset,ffi);
  }
  
+ 
+ 
+ char*
+ rb_str2cstr(str, len)
+     VALUE str;
+     long *len;
+ {
+     StringValue(str);
+     if (len) *len = RSTRING_LEN(str);
+     else if (RTEST(ruby_verbose) &&  RSTRING_LEN(str) != ((long)strlen(RSTRING_PTR(str))) )  {
+ 	rb_warn("string contains \\0 character");
+     }
+     return RSTRING_PTR(str);
+ }
+ 
+ 
  static int rf_read(const char *path,char * buf, size_t size,off_t offset,struct fuse_file_info *ffi)
  {
    VALUE args[4];
***************
*** 724,730 ****
    {
      length = NUM2LONG(rb_funcall(res, rb_intern("length"), 0));
      rbuf = rb_str2cstr(res, &length);
!     if (length<=size)
      {
        memcpy(buf,rbuf,length);
        return length;
--- 744,750 ----
    {
      length = NUM2LONG(rb_funcall(res, rb_intern("length"), 0));
      rbuf = rb_str2cstr(res, &length);
!     if (length<=(long)size)
      {
        memcpy(buf,rbuf,length);
        return length;
***************
*** 1536,1541 ****
--- 1556,1562 ----
  
    struct intern_fuse *inf;
    Data_Get_Struct(self,struct intern_fuse,inf);
+ 
    if (RESPOND_TO(self,"getattr"))
      inf->fuse_op.getattr     = rf_getattr;
    if (RESPOND_TO(self,"readlink"))
***************
*** 1617,1628 ****
--- 1638,1651 ----
    if (RESPOND_TO(self,"poll"))
      inf->fuse_op.poll        = rf_poll;      // TODO
  
+ 
    struct fuse_args
      *kargs = rarray2fuseargs(kernelopts),
      *largs = rarray2fuseargs(libopts);
  
    intern_fuse_init(inf, STR2CSTR(mountpoint), kargs, largs);
  
+ 
    //TODO this won't work with multithreading!!!
    fuse_object=self;
  
